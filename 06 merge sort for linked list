class Solution:
    def findMid(self, head):
        slow = head
        fast = head.next
        while(fast != None and fast.next != None):
            slow = slow.next
            fast = fast.next.next
        return slow
        
    def merge(self, a, b):
        
        result = None
        
        if a == None:
            return b
        if b == None:
            return a
        
        if a.data >= b.data:
            result = b
            result.next = self.merge(a, b.next)
        else:
            result = a
            result.next = self.merge(a.next, b)
        
        return result
                
        
    def mergeSort(self, head):
        
        if head == None or head.next == None:
            return head
        
        mid = self.findMid(head)
        nexttomiddle = mid.next
        mid.next = None
        
        left = self.mergeSort(head)
        right = self.mergeSort(nexttomiddle)
        sortedList = self.merge(left, right)
        
        return sortedList
