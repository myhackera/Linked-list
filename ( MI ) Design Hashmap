class Node:
    def __init__(self, key, value):
        
        self.key = key
        self.value = value
        self.next = None
        

class MyHashMap:

    def __init__(self):
        
        self.capacity = 1000
        self.hash_table = [None]*self.capacity
        # self.hash_table = [None, None, None, .... ]
        
        
        #                      0       1     ..
        # self.hash_table = [[1->1], [2->2], .. ]

    def hash(self, key):
        return key%self.capacity
    
    def put(self, key: int, value: int) -> None:
        
        index = self.hash(key)
        
        # if anything is present in hash_table or not
        if self.hash_table[index] == None:
            self.hash_table[index] = Node(key, value)
        
        else:
            curr_node = self.hash_table[index]
            while curr_node:
                if curr_node.key == key:
                    curr_node.value = value
                    return
                else:
                    if curr_node.next == None:
                        break
                    curr_node = curr_node.next

            curr_node.next = Node(key, value)
        

    def get(self, key: int) -> int:
        
        index = self.hash(key)
        curr_node = self.hash_table[index]
        
        while curr_node:
            if curr_node.key == key:
                return curr_node.value 
            else:
                curr_node = curr_node.next
        
        return -1


    def remove(self, key: int) -> None:
        
        index = self.hash(key)
        
        # if index is present in self.index or not 
        if self.hash_table[index] == None:
            return 
        
        curr_node = prev_node = self.hash_table[index]
        
        if curr_node.key == key:
            self.hash_table[index] = curr_node.next
        else:
            curr_node = curr_node.next
            while curr_node:
                if curr_node.key == key:
                    prev_node.next = curr_node.next
                    break
                else:
                    curr_node = curr_node.next
                    prev_node = prev_node.next
                
