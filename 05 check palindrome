SOLUTION 1.) 
===============================>

def isPalindrome(head):

    slow = head
    stack = []
     
    ispalin = True
    
    while slow != None:
    
        stack.append(slow.data)
        slow = slow.next
        
        while head != None:
        
            i = stack.pop()
            if head.data == i:
                ispalin = True
            else:
                ispalin = False
                break
        head = head.next
         
    return ispalin
    
TC : O(N)
SC : O(N)


SOLUTION 2.) 
==============================>

class Solution:
    def rev(self, head):
        
        current = head
        prev = None
        while current :
            temp = current.next
            current.next = prev
            prev = current
            current = temp
        head = prev
        return head
        
        
        
    def isPalindrome(self, head: Optional[ListNode]) -> bool:
        
        if head == None or head.next == None:
            return True
        
        slow = head
        fast = head
        
        while fast.next and fast.next.next:
            slow = slow.next
            fast = fast.next.next
            
        slow.next = self.rev(slow.next)
        slow = slow.next
        
        while slow:
            if head.val != slow.val:
                return False
            slow = slow.next
            head = head.next
        return True
        
TC : O(N)
SC : O(1)
